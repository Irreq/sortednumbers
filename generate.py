import json
import math
import gzip

numbers = []


def package(number, symbol="", description="", area=None):
    return {"n": number, "s": symbol, "d": description}


def ordinal(n: int):
    if 11 <= (n % 100) <= 13:
        suffix = "th"
    else:
        suffix = ["th", "st", "nd", "rd", "th"][min(n % 10, 4)]
    return str(n) + suffix


def primes():
    # Source: https://prime-numbers.info/list/first-1000-primes
    some_primes = [
        3,
        5,
        7,
        11,
        13,
        17,
        19,
        23,
        29,
        31,
        37,
        41,
        43,
        47,
        53,
        59,
        61,
        67,
        71,
        73,
        79,
        83,
        89,
        97,
        101,
        103,
        107,
        109,
        113,
        127,
        131,
        137,
        139,
        149,
        151,
        157,
        163,
        167,
        173,
        179,
        181,
        191,
        193,
        197,
        199,
        211,
        223,
        227,
        229,
        233,
        239,
        241,
        251,
        257,
        263,
        269,
        271,
        277,
        281,
        283,
        293,
        307,
        311,
        313,
        317,
        331,
        337,
        347,
        349,
        353,
        359,
        367,
        373,
        379,
        383,
        389,
        397,
        401,
        409,
        419,
        421,
        431,
        433,
        439,
        443,
        449,
        457,
        461,
        463,
        467,
        479,
        487,
        491,
        499,
        503,
        509,
        521,
        523,
        541,
        547,
        557,
        563,
        569,
        571,
        577,
        587,
        593,
        599,
        601,
        607,
        613,
        617,
        619,
        631,
        641,
        643,
        647,
        653,
        659,
        661,
        673,
        677,
        683,
        691,
        701,
        709,
        719,
        727,
        733,
        739,
        743,
        751,
        757,
        761,
        769,
        773,
        787,
        797,
        809,
        811,
        821,
        823,
        827,
        829,
        839,
        853,
        857,
        859,
        863,
        877,
        881,
        883,
        887,
        907,
        911,
        919,
        929,
        937,
        941,
        947,
        953,
        967,
        971,
        977,
        983,
        991,
        997,
        1009,
        1013,
        1019,
        1021,
        1031,
        1033,
        1039,
        1049,
        1051,
        1061,
        1063,
        1069,
        1087,
        1091,
        1093,
        1097,
        1103,
        1109,
        1117,
        1123,
        1129,
        1151,
        1153,
        1163,
        1171,
        1181,
        1187,
        1193,
        1201,
        1213,
        1217,
        1223,
        1229,
        1231,
        1237,
        1249,
        1259,
        1277,
        1279,
        1283,
        1289,
        1291,
        1297,
        1301,
        1303,
        1307,
        1319,
        1321,
        1327,
        1361,
        1367,
        1373,
        1381,
        1399,
        1409,
        1423,
        1427,
        1429,
        1433,
        1439,
        1447,
        1451,
        1453,
        1459,
        1471,
        1481,
        1483,
        1487,
        1489,
        1493,
        1499,
        1511,
        1523,
        1531,
        1543,
        1549,
        1553,
        1559,
        1567,
        1571,
        1579,
        1583,
        1597,
        1601,
        1607,
        1609,
        1613,
        1619,
        1621,
        1627,
        1637,
        1657,
        1663,
        1667,
        1669,
        1693,
        1697,
        1699,
        1709,
        1721,
        1723,
        1733,
        1741,
        1747,
        1753,
        1759,
        1777,
        1783,
        1787,
        1789,
        1801,
        1811,
        1823,
        1831,
        1847,
        1861,
        1867,
        1871,
        1873,
        1877,
        1879,
        1889,
        1901,
        1907,
        1913,
        1931,
        1933,
        1949,
        1951,
        1973,
        1979,
        1987,
        1993,
        1997,
        1999,
        2003,
        2011,
        2017,
        2027,
        2029,
        2039,
        2053,
        2063,
        2069,
        2081,
        2083,
        2087,
        2089,
        2099,
        2111,
        2113,
        2129,
        2131,
        2137,
        2141,
        2143,
        2153,
        2161,
        2179,
        2203,
        2207,
        2213,
        2221,
        2237,
        2239,
        2243,
        2251,
        2267,
        2269,
        2273,
        2281,
        2287,
        2293,
        2297,
        2309,
        2311,
        2333,
        2339,
        2341,
        2347,
        2351,
        2357,
        2371,
        2377,
        2381,
        2383,
        2389,
        2393,
        2399,
        2411,
        2417,
        2423,
        2437,
        2441,
        2447,
        2459,
        2467,
        2473,
        2477,
        2503,
        2521,
        2531,
        2539,
        2543,
        2549,
        2551,
        2557,
        2579,
        2591,
        2593,
        2609,
        2617,
        2621,
        2633,
        2647,
        2657,
        2659,
        2663,
        2671,
        2677,
        2683,
        2687,
        2689,
        2693,
        2699,
        2707,
        2711,
        2713,
        2719,
        2729,
        2731,
        2741,
        2749,
        2753,
        2767,
        2777,
        2789,
        2791,
        2797,
        2801,
        2803,
        2819,
        2833,
        2837,
        2843,
        2851,
        2857,
        2861,
        2879,
        2887,
        2897,
        2903,
        2909,
        2917,
        2927,
        2939,
        2953,
        2957,
        2963,
        2969,
        2971,
        2999,
        3001,
        3011,
        3019,
        3023,
        3037,
        3041,
        3049,
        3061,
        3067,
        3079,
        3083,
        3089,
        3109,
        3119,
        3121,
        3137,
        3163,
        3167,
        3169,
        3181,
        3187,
        3191,
        3203,
        3209,
        3217,
        3221,
        3229,
        3251,
        3253,
        3257,
        3259,
        3271,
        3299,
        3301,
        3307,
        3313,
        3319,
        3323,
        3329,
        3331,
        3343,
        3347,
        3359,
        3361,
        3371,
        3373,
        3389,
        3391,
        3407,
        3413,
        3433,
        3449,
        3457,
        3461,
        3463,
        3467,
        3469,
        3491,
        3499,
        3511,
        3517,
        3527,
        3529,
        3533,
        3539,
        3541,
        3547,
        3557,
        3559,
        3571,
        3581,
        3583,
        3593,
        3607,
        3613,
        3617,
        3623,
        3631,
        3637,
        3643,
        3659,
        3671,
        3673,
        3677,
        3691,
        3697,
        3701,
        3709,
        3719,
        3727,
        3733,
        3739,
        3761,
        3767,
        3769,
        3779,
        3793,
        3797,
        3803,
        3821,
        3823,
        3833,
        3847,
        3851,
        3853,
        3863,
        3877,
        3881,
        3889,
        3907,
        3911,
        3917,
        3919,
        3923,
        3929,
        3931,
        3943,
        3947,
        3967,
        3989,
        4001,
        4003,
        4007,
        4013,
        4019,
        4021,
        4027,
        4049,
        4051,
        4057,
        4073,
        4079,
        4091,
        4093,
        4099,
        4111,
        4127,
        4129,
        4133,
        4139,
        4153,
        4157,
        4159,
        4177,
        4201,
        4211,
        4217,
        4219,
        4229,
        4231,
        4241,
        4243,
        4253,
        4259,
        4261,
        4271,
        4273,
        4283,
        4289,
        4297,
        4327,
        4337,
        4339,
        4349,
        4357,
        4363,
        4373,
        4391,
        4397,
        4409,
        4421,
        4423,
        4441,
        4447,
        4451,
        4457,
        4463,
        4481,
        4483,
        4493,
        4507,
        4513,
        4517,
        4519,
        4523,
        4547,
        4549,
        4561,
        4567,
        4583,
        4591,
        4597,
        4603,
        4621,
        4637,
        4639,
        4643,
        4649,
        4651,
        4657,
        4663,
        4673,
        4679,
        4691,
        4703,
        4721,
        4723,
        4729,
        4733,
        4751,
        4759,
        4783,
        4787,
        4789,
        4793,
        4799,
        4801,
        4813,
        4817,
        4831,
        4861,
        4871,
        4877,
        4889,
        4903,
        4909,
        4919,
        4931,
        4933,
        4937,
        4943,
        4951,
        4957,
        4967,
        4969,
        4973,
        4987,
        4993,
        4999,
        5003,
        5009,
        5011,
        5021,
        5023,
        5039,
        5051,
        5059,
        5077,
        5081,
        5087,
        5099,
        5101,
        5107,
        5113,
        5119,
        5147,
        5153,
        5167,
        5171,
        5179,
        5189,
        5197,
        5209,
        5227,
        5231,
        5233,
        5237,
        5261,
        5273,
        5279,
        5281,
        5297,
        5303,
        5309,
        5323,
        5333,
        5347,
        5351,
        5381,
        5387,
        5393,
        5399,
        5407,
        5413,
        5417,
        5419,
        5431,
        5437,
        5441,
        5443,
        5449,
        5471,
        5477,
        5479,
        5483,
        5501,
        5503,
        5507,
        5519,
        5521,
        5527,
        5531,
        5557,
        5563,
        5569,
        5573,
        5581,
        5591,
        5623,
        5639,
        5641,
        5647,
        5651,
        5653,
        5657,
        5659,
        5669,
        5683,
        5689,
        5693,
        5701,
        5711,
        5717,
        5737,
        5741,
        5743,
        5749,
        5779,
        5783,
        5791,
        5801,
        5807,
        5813,
        5821,
        5827,
        5839,
        5843,
        5849,
        5851,
        5857,
        5861,
        5867,
        5869,
        5879,
        5881,
        5897,
        5903,
        5923,
        5927,
        5939,
        5953,
        5981,
        5987,
        6007,
        6011,
        6029,
        6037,
        6043,
        6047,
        6053,
        6067,
        6073,
        6079,
        6089,
        6091,
        6101,
        6113,
        6121,
        6131,
        6133,
        6143,
        6151,
        6163,
        6173,
        6197,
        6199,
        6203,
        6211,
        6217,
        6221,
        6229,
        6247,
        6257,
        6263,
        6269,
        6271,
        6277,
        6287,
        6299,
        6301,
        6311,
        6317,
        6323,
        6329,
        6337,
        6343,
        6353,
        6359,
        6361,
        6367,
        6373,
        6379,
        6389,
        6397,
        6421,
        6427,
        6449,
        6451,
        6469,
        6473,
        6481,
        6491,
        6521,
        6529,
        6547,
        6551,
        6553,
        6563,
        6569,
        6571,
        6577,
        6581,
        6599,
        6607,
        6619,
        6637,
        6653,
        6659,
        6661,
        6673,
        6679,
        6689,
        6691,
        6701,
        6703,
        6709,
        6719,
        6733,
        6737,
        6761,
        6763,
        6779,
        6781,
        6791,
        6793,
        6803,
        6823,
        6827,
        6829,
        6833,
        6841,
        6857,
        6863,
        6869,
        6871,
        6883,
        6899,
        6907,
        6911,
        6917,
        6947,
        6949,
        6959,
        6961,
        6967,
        6971,
        6977,
        6983,
        6991,
        6997,
        7001,
        7013,
        7019,
        7027,
        7039,
        7043,
        7057,
        7069,
        7079,
        7103,
        7109,
        7121,
        7127,
        7129,
        7151,
        7159,
        7177,
        7187,
        7193,
        7207,
        7211,
        7213,
        7219,
        7229,
        7237,
        7243,
        7247,
        7253,
        7283,
        7297,
        7307,
        7309,
        7321,
        7331,
        7333,
        7349,
        7351,
        7369,
        7393,
        7411,
        7417,
        7433,
        7451,
        7457,
        7459,
        7477,
        7481,
        7487,
        7489,
        7499,
        7507,
        7517,
        7523,
        7529,
        7537,
        7541,
        7547,
        7549,
        7559,
        7561,
        7573,
        7577,
        7583,
        7589,
        7591,
        7603,
        7607,
        7621,
        7639,
        7643,
        7649,
        7669,
        7673,
        7681,
        7687,
        7691,
        7699,
        7703,
        7717,
        7723,
        7727,
        7741,
        7753,
        7757,
        7759,
        7789,
        7793,
        7817,
        7823,
        7829,
        7841,
        7853,
        7867,
        7873,
        7877,
        7879,
        7883,
        7901,
        7907,
        7919,
    ]

    def factorize(number):
        factors = []
        divisor = 2
        while number > 1:
            while number % divisor == 0:
                factors.append(divisor)
                number //= divisor
            divisor += 1
        return factors

    max_n = len(some_primes)

    for i in range(max_n):
        if i < max_n - 1:
            for k in range(some_primes[i] + 1, some_primes[i + 1]):
                numbers.append(
                    package(
                        k,
                        description="\\( "
                        + "\\cdot".join([str(s) for s in factorize(k)])
                        + " \\)",
                    )
                    # {
                    #     "number": k,
                    #     "symbol": "",
                    #     "description": "\\( "
                    #     + "\\cdot".join([str(s) for s in factorize(k)])
                    #     + " \\)",
                    # }
                )

    for i, prime in enumerate(some_primes):
        numbers.append(
            package(prime, description=f"{ordinal(i + 2)} Prime")
            # {"number": prime, "symbol": "", "description": f"{ordinal(i + 2)} Prime"}
        )


def physics():
    numbers.extend(
        [
            package(299792458, "\\( c \\)", "Speed of light in vacuum"),
            package(
                1.62607015e-34,
                "\\( h \\)",
                "A photon's energy is equal to its frequency multiplied by the Planck constant, and the wavelength of a matter wave equals the Planck constant divided by the associated particle momentum.",
            ),
            package(
                1.25663706127e-6,
                "\\( \\mu_0 \\)",
                "Vacuum magnetic permeability \\( [N \\cdot A^{-2}] \\)",
            ),
            package(
                8.8541878188e-12,
                "\\( \\epsilon_0\\)",
                "Vacuum electric permeability \\( [F \\cdot M^{-1}] \\)",
            ),
            package(
                1.380649e-23,
                "\\( k_B\\)",
                "Boltzmann constant \\( [J \\cdot K^{-1}] \\)",
            ),
            package(1.602176634e-19, "\\( e \\)", "Elementary charge [C]"),
            package(9.1093837139e-31, "\\( m_e \\)", "Electron mass [kg]"),
            package(1.67262192595e-27, "\\( m_p \\)", "Proton mass [kg]"),
            package(1.67492750056e-27, "\\( m_n \\)", "Neutron mass [kg]"),
        ]
    )


def esoteric():
    numbers.extend(
        [
            # {
            #     "number": "-Infinity",
            #     "symbol": "\\( -\\infty \\)",
            #     "description": "",
            # },
            # {
            #     "number": "Infinity",
            #     "symbol": "\\( \\infty \\)",
            #     "description": "",
            # },
            # {
            #     "number": "-Infinity",
            #     "symbol": "\\( -\\infty \\)",
            #     "description": "",
            # },
            # {
            #     "number": "Infinity",
            #     "symbol": "\\( \\infty \\)",
            #     "description": "",
            # },
            # package(
            #     1597463007,
            #     symbol="0x5F3759DF",
            #     description="Fast InvSqrt() or by the hexadecimal constant 0x5F3759DF, is an algorithm that estimates  \\( \\frac{1}{\\sqrt{x}} \\), the reciprocal (or multiplicative inverse) of the square root of a 32-bit floating-point number \\( x \\) in IEEE 754 floating-point format.",
            # ),
            # package(-1e200, symbol="\\( -\\infty \\)"),
            # package(1e200, symbol="\\( \\infty \\)"),
            package(1e100, symbol="Gogol", description="Large number"),
            # {
            #     "number": 1597463007,
            #     "symbol": "0x5F3759DF",
            #     "description": "Fast InvSqrt() or by the hexadecimal constant 0x5F3759DF, is an algorithm that estimates  \\( \\frac{1}{\\sqrt{x}} \\), the reciprocal (or multiplicative inverse) of the square root of a 32-bit floating-point number \\( x \\) in IEEE 754 floating-point format.",
            # },
            # {"number": 1e100, "symbol": "Gogol", "description": "Large number"},
        ]
    )


def basic():
    numbers.extend(
        [
            package(-1, "", "Equal to \\( i^2 \\)"),
            package(0, "Zero", ""),
            package(1, "One", ""),
            package(math.exp(1), "\\( e \\)", "Euler's number"),
            package(math.log(2), "\\( ln(2) \\)", "Real root of \\( e^x = 2 \\)"),
            package(
                math.pi,
                "\\( \\pi \\)",
                "Ratio of a circle's circumference to its diameter.",
            ),
            package(2 * math.pi, "\\( \\tau \\)", "Equal to \\( 2\\pi \\)"),
            package(
                (1 + math.sqrt(5)) / 2,
                "\\( \\phi \\)",
                "Golden ratio equal to \\( \\frac{1 + \\sqrt{5}}{2} \\)",
            ),
        ]
    )


def hexnumbers():
    # src: https://en.wikipedia.org/wiki/Magic_number_(programming)
    hex_nums = {
        "00008123": "Used in MS Visual C++. Deleted pointers are set to this value, so they throw an exception, when they are used after; it is a more recognizable alias for the zero address. It is activated with the Security Development Lifecycle (/sdl) option.",
        "FACADE": '"Facade", Used by a number of RTOSes',
        "1BADB002": '"1 bad boot", Multiboot header magic number',
        "8BADF00D": '"Ate bad food", Indicates that an Apple iOS application has been terminated because a watchdog timeout occurred.',
        "A5A5A5A5": "Used in embedded development because the alternating bit pattern (1010 0101) creates an easily recognized pattern on oscilloscopes and logic analyzers. ",
        "A5": """Used in FreeBSD's PHK malloc(3) for debugging when /etc/malloc.conf is symlinked to "-J" to initialize all newly allocated memory as this value is not a NULL pointer or ASCII NUL character.""",
        "ABABABAB": """Used by Microsoft's debug HeapAlloc() to mark "no man's land" guard bytes after allocated heap memory.""",
        "ABADBABE": """"A bad babe", Used by Apple as the "Boot Zero Block" magic number """,
        "ABBABABE": """"ABBA babe", used by Driver Parallel Lines memory heap. """,
        "ABADCAFE": """"A bad cafe", Used to initialize all unallocated memory (Mungwall, AmigaOS) """,
        # "B16B00B5": """"Big Boobs", Formerly required by Microsoft's Hyper-V hypervisor to be used by Linux guests as the upper half of their "guest id""",
        "BAADF00D": """"Bad food", Used by Microsoft's debug HeapAlloc() to mark uninitialized allocated heap memory""",
        "BAAAAAAD": """"Baaaaaad", Indicates that the Apple iOS log is a stackshot of the entire system, not a crash report""",
        "BAD22222": """"Bad too repeatedly", Indicates that an Apple iOS VoIP application has been terminated because it resumed too frequently.""",
        "BADBADBADBAD": """"Bad bad bad bad", Burroughs large systems "uninitialized" memory (48-bit words) """,
        "BADC0FFEE0DDF00D": """"Bad coffee odd food", Used on IBM RS/6000 64-bit systems to indicate uninitialized CPU registers""",
        "BADDCAFE": """Bad cafe", On Sun Microsystems' Solaris, marks uninitialized kernel memory (KMEM_UNINITIALIZED_PATTERN) """,
        "BBADBEEF": """"Bad beef", Used in WebKit, for particularly unrecoverable errors""",
        "BEBEBEBE": """Used by AddressSanitizer to fill allocated but not initialized memory""",
        "BEEFCACE": """"Beef cake", Used by Microsoft .NET as a magic number in resource files""",
        "C00010FF": """"Cool off", Indicates Apple iOS app was killed by the operating system in response to a thermal event""",
        "CAFEBABE": """"Cafe babe", Used by Java for class files""",
        "CAFED00D": """"Cafe dude", Used by Java for their pack200 compression """,
        "CAFEFEED": """"Cafe feed", Used by Sun Microsystems' Solaris debugging kernel to mark kmemfree() memory""",
        "CCCCCCCC": """Used by Microsoft's C++ debugging runtime library and many DOS environments to mark uninitialized stack memory. CC is the opcode of the INT 3 debug breakpoint interrupt on x86 processors.""",
        "CDCDCDCD": """Used by Microsoft's C/C++ debug malloc() function to mark uninitialized heap memory, usually returned from HeapAlloc()""",
        "0D15EA5E": """"Zero Disease", Used as a flag to indicate regular boot on the GameCube and Wii consoles """,
        "DDDDDDDD": "Used by MicroQuill's SmartHeap and Microsoft's C/C++ debug free() function to mark freed heap memory",
        "DEAD10CC": """"Dead lock", Indicates that an Apple iOS application has been terminated because it held on to a system resource while running in the background""",
        "DEADBABE": """"Dead babe", Used at the start of Silicon Graphics' IRIX arena files """,
        "DEADBEEF": """"Dead beef", Famously used on IBM systems such as the RS/6000, also used in the classic Mac OS operating systems, OPENSTEP Enterprise, and the Commodore Amiga. On Sun Microsystems' Solaris, marks freed kernel memory (KMEM_FREE_PATTERN) """,
        "DEADCAFE": """"Dead cafe", Used by Microsoft .NET as an error number in DLLs""",
        "DEADC0DE": """"Dead code", Used as a marker in OpenWRT firmware to signify the beginning of the to-be created jffs2 file system at the end of the static firmware""",
        "DEADFA11": """"Dead fail", Indicates that an Apple iOS application has been force quit by the user""",
        "DEADF00D": """"Dead food", Used by Mungwall on the Commodore Amiga to mark allocated but uninitialized memory""",
        "DEFEC8ED": """"Defecated", Used for OpenSolaris core dumps""",
        "DEADDEAD": '"Dead Dead" indicates that the user deliberately initiated a crash dump from either the kernel debugger or the keyboard under Microsoft Windows.',
        "D00D2BAD": '"Dude, Too Bad", Used by Safari crashes on macOS Big Sur.',
        "D00DF33D": '"Dude feed", Used by the devicetree to mark the start of headers.',
        "EBEBEBEB": "From MicroQuill's SmartHeap ",
        "FADEDEAD": '"Fade dead", Comes at the end to identify every AppleScript script ',
        "FDFDFDFD": """Used by Microsoft's C/C++ debug malloc() function to mark "no man's land" guard bytes before and after allocated heap memory,[26] and some debug Secure C-Runtime functions implemented by Microsoft (e.g. strncat_s)""",
        "FEE1DEAD": '"Feel dead", Used by Linux reboot() syscall',
        "FEEDFACE": """"Feed face", Seen in PowerPC Mach-O binaries on Apple Inc.'s Mac OSX platform. On Sun Microsystems' Solaris, marks the red zone (KMEM_REDZONE_PATTERN)""",
        "FEEEFEEE": """"Fee fee", Used by Microsoft's debug HeapFree() to mark freed heap memory. Some nearby internal bookkeeping values may have the high word set to FEEE as well.""",
        "5F3759DF": "Fast InvSqrt() or by the hexadecimal constant 0x5F3759DF, is an algorithm that estimates  \\( \\frac{1}{\\sqrt{x}} \\), the reciprocal (or multiplicative inverse) of the square root of a 32-bit floating-point number \\( x \\) in IEEE 754 floating-point format.",
    }
    for code, desc in hex_nums.items():
        h = "0x" + code
        numbers.append(package(eval(h), symbol=h, description=desc))


def bits():
    special = [8, 16, 32, 64, 128]
    for i in special:
        unsigned_max = 2**i - 1
        signed_min = -(2 ** (i - 1))
        signed_max = 2 ** (i - 1) - 1

        numbers.extend(
            [
                package(
                    unsigned_max,
                    symbol=hex(unsigned_max).upper().replace("X", "x"),
                    description=f"The maximum unsigned {i} bit value \\( (2^"
                    "{" + str(i) + "} - 1)\\)",
                ),
                package(
                    signed_max,
                    symbol=hex(signed_max).upper().replace("X", "x"),
                    description=f"The maximum signed {i} bit value \\( (2^"
                    "{" + str(i - 1) + "} - 1)\\)",
                ),
                package(
                    signed_min,
                    symbol=hex(-signed_min).upper().replace("X", "x"),
                    description=f"The minimum signed {i} bit value ",
                ),
            ]
        )


def roots():
    for i in range(2, 100):
        if (i**0.5) % 1 == 0:
            continue
        numbers.append(
            package(
                i**0.5,
                description="\\( + \\sqrt{" + str(i) + "} \\) ",
            )
        )


def base10(powers=range(-24, 100)):
    si = {
        "-24": "yocto",
        "-21": "zepto",
        "-18": "atto",
        "-15": "femto",
        "-12": "pico",
        "-9": "nano",
        "-6": "micro",
        "-3": "milli",
        "-2": "centi",
        "-1": "deci",
        "0": "",
        "1": "deca",
        "2": "hecto",
        "3": "kilo",
        "6": "mega",
        "9": "giga",
        "12": "tera",
        "15": "peta",
        "18": "exa",
        "21": "zetta",
        "24": "yotta",
    }
    for power in powers:
        if power == 0:
            continue
        prefix = si.get(str(power), "")
        numbers.append(
            package(
                10**power,
                description="\\( 10^{" + str(power) + "} \\) " + prefix,
            )
        )


def base2(powers=range(-128, 128)):
    for power in powers:
        if power in [0]:
            continue
        frac = "" or (" = \\frac{1}{" + str(2 ** abs(power)) + "}") * (power < 0)
        numbers.append(
            package(
                2**power,
                description="\\( 2^{" + str(power) + "} " + frac + " \\)",
            )
        )


def fractions():
    for i in range(3, 20):
        if i in [2, 4, 8, 10, 16]:
            continue
        numbers.append(
            package(
                1.0 / i,
                description="\\( \\frac{1}{" + str(i) + "} \\)",
            )
        )

    storage = {}

    for i in range(1, 100):
        for j in range(1, 100):
            if i == j:
                continue

            val = i / j
            if val % 1 == 0:
                continue

            if val in storage:
                storage[val] += ", \\frac{" + str(i) + "}{" + str(j) + "}"
            else:
                storage[val] = "\\( \\frac{" + str(i) + "}{" + str(j) + "}"

    for val, desc in storage.items():
        numbers.append(package(val, description=desc + "\\)"))


functions = [
    primes,
    fractions,
    roots,
    base10,
    base2,
    hexnumbers,
    bits,
    physics,
    esoteric,
    basic,
]

if __name__ == "__main__":

    for f in functions:
        f()

    with gzip.open("numbers.json.gz", "wt", encoding="utf-8") as f:
        json.dump(numbers, f, separators=(",", ":"))
